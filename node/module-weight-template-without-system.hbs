//! Autogenerated weights for {{pallet}}
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION {{version}}
//! DATE: {{date}}, STEPS: `{{cmd.steps}}`, REPEAT: {{cmd.repeat}}, LOW RANGE: `{{cmd.lowest_range_values}}`, HIGH RANGE: `{{cmd.highest_range_values}}`
//! EXECUTION: {{cmd.execution}}, WASM-EXECUTION: {{cmd.wasm_execution}}, CHAIN: {{cmd.chain}}, DB CACHE: {{cmd.db_cache}}

// Executed Command:
{{#each args as |arg|~}}
// {{arg}}
{{/each}}

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, RuntimeDbWeight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for {{pallet}}.
pub trait WeightInfo {
	{{~#each benchmarks as |benchmark|}}
	fn {{benchmark.name~}}
	(
		{{~#each benchmark.components as |c| ~}}
		{{c.name}}: u32, {{/each~}}
	) -> Weight;
	{{~/each}}
}

/// Weights for {{pallet}} using the Substrate node and recommended hardware.
pub struct SubstrateWeight<W>(PhantomData<W>);
impl<W: Get<RuntimeDbWeight>> WeightInfo for SubstrateWeight<W> {
	{{~#each benchmarks as |benchmark|}}
	fn {{benchmark.name~}}
	(
		{{~#each benchmark.components as |c| ~}}
		{{~#if (not c.is_used)}}_{{/if}}{{c.name}}: u32, {{/each~}}
	) -> Weight {
		Weight::from_ref_time({{underscore benchmark.base_weight}})
			{{~#each benchmark.component_weight as |cw|}}
			// Standard Error: {{underscore cw.error}}
			.saturating_add(Weight::from_ref_time({{underscore cw.slope}}).saturating_mul({{cw.name}} as u64))
			{{~/each}}
			{{~#if (ne benchmark.base_reads "0")}}
			.saturating_add(W::get().reads({{benchmark.base_reads}}))
			{{~/if}}
			{{~#each benchmark.component_reads as |cr|}}
			.saturating_add(W::get().reads(({{cr.slope}} as u64).saturating_mul({{cr.name}} as u64)))
			{{~/each}}
			{{~#if (ne benchmark.base_writes "0")}}
			.saturating_add(W::get().writes({{benchmark.base_writes}}))
			{{~/if}}
			{{~#each benchmark.component_writes as |cw|}}
			.saturating_add(W::get().writes(({{cw.slope}} as u64).saturating_mul({{cw.name}} as u64)))
			{{~/each}}
	}
	{{~/each}}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	{{~#each benchmarks as |benchmark|}}
	fn {{benchmark.name~}}
	(
		{{~#each benchmark.components as |c| ~}}
		{{~#if (not c.is_used)}}_{{/if}}{{c.name}}: u32, {{/each~}}
	) -> Weight {
		Weight::from_ref_time({{underscore benchmark.base_weight}})
			{{~#each benchmark.component_weight as |cw|}}
			// Standard Error: {{underscore cw.error}}
			.saturating_add(Weight::from_ref_time({{underscore cw.slope}}).saturating_mul({{cw.name}} as u64))
			{{~/each}}
			{{~#if (ne benchmark.base_reads "0")}}
			.saturating_add(RocksDbWeight::get().reads({{benchmark.base_reads}}))
			{{~/if}}
			{{~#each benchmark.component_reads as |cr|}}
			.saturating_add(RocksDbWeight::get().reads(({{cr.slope}} as u64).saturating_mul({{cr.name}} as u64)))
			{{~/each}}
			{{~#if (ne benchmark.base_writes "0")}}
			.saturating_add(RocksDbWeight::get().writes({{benchmark.base_writes}}))
			{{~/if}}
			{{~#each benchmark.component_writes as |cw|}}
			.saturating_add(RocksDbWeight::get().writes(({{cw.slope}} as u64).saturating_mul({{cw.name}} as u64)))
			{{~/each}}
	}
	{{~/each}}
}
