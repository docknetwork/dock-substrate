//! Autogenerated weights for pallet_migration
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-09-12, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/dock-node
// benchmark
// pallet
// --wasm-execution=compiled
// --pallet=pallet_migration
// --extra
// --repeat=20
// --extrinsic=*
// --steps=50
// --template=node/module-weight-template-without-system.hbs
// --output=./pallets/cheqd-migration/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, RuntimeDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_migration.
pub trait WeightInfo {
    fn migrate() -> Weight;
    fn migrate_validation_failure() -> Weight;
}

/// Weights for pallet_migration using the Substrate node and recommended hardware.
pub struct SubstrateWeight<W>(PhantomData<W>);
impl<W: Get<RuntimeDbWeight>> WeightInfo for SubstrateWeight<W> {
    fn migrate() -> Weight {
        Weight::from_ref_time(20_000_000)
            .saturating_add(W::get().reads(1))
            .saturating_add(W::get().writes(1))
    }
    fn migrate_validation_failure() -> Weight {
        Weight::from_ref_time(3_000_000)
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn migrate() -> Weight {
        Weight::from_ref_time(20_000_000)
            .saturating_add(RocksDbWeight::get().reads(1))
            .saturating_add(RocksDbWeight::get().writes(1))
    }
    fn migrate_validation_failure() -> Weight {
        Weight::from_ref_time(3_000_000)
    }
}
