//! This module contains functions to return hardcoded data for keys and signatures as key generation
//! and signing are not possible during benchmarking.

use sp_std::prelude::Vec;

use crate::blob::ID_BYTE_SIZE;
use crate::did::{Bytes32, Bytes33, Bytes64, Bytes65};
use crate::did::{DidSignature, PublicKey, DID_BYTE_SIZE};

/// Size of array of hardcoded data for DIDs
pub const DID_DATA_SIZE: usize = 3;
/// Size of array of hardcoded data for revocation
pub const REV_DATA_SIZE: usize = 3;
/// Size of array of hardcoded data for blobs
pub const BLOB_DATA_SIZE: usize = 3;

/// Get nonce, DID, hardcoded keys and signature for key update, `typ` can be 0, 1 or 2 for sr25519, ed25519 and secp
/// respectively. `index` is the index in hardcoded data array.
pub fn get_data_for_key_update(
    typ: u8,
    index: usize,
) -> (u32, [u8; DID_BYTE_SIZE], PublicKey, PublicKey, DidSignature) {
    assert!(typ < 3);
    assert!(index < DID_DATA_SIZE);
    if typ == 0 {
        // Sr25519
        let did = [1 as u8; DID_BYTE_SIZE];
        let data: [(u32, [u8; DID_BYTE_SIZE], [u8; 32], [u8; 32], [u8; 64]); DID_DATA_SIZE] = [
            (
                0,
                did.clone(),
                [
                    50, 246, 11, 172, 222, 170, 174, 101, 109, 180, 180, 163, 160, 183, 147, 137,
                    198, 76, 160, 161, 131, 188, 45, 31, 134, 215, 122, 126, 183, 225, 177, 124,
                ],
                [
                    182, 193, 208, 40, 35, 242, 203, 46, 4, 235, 168, 222, 40, 193, 24, 183, 223,
                    30, 134, 147, 163, 210, 71, 213, 66, 238, 236, 252, 124, 94, 201, 28,
                ],
                [
                    216, 155, 215, 74, 26, 133, 93, 126, 61, 247, 23, 41, 193, 135, 212, 69, 255,
                    66, 41, 217, 87, 221, 160, 165, 108, 130, 92, 138, 105, 190, 69, 81, 90, 235,
                    70, 42, 121, 121, 182, 69, 194, 73, 140, 244, 139, 199, 197, 254, 252, 74, 230,
                    55, 250, 215, 200, 110, 141, 120, 123, 218, 194, 54, 30, 129,
                ],
            ),
            (
                0,
                did.clone(),
                [
                    26, 147, 34, 16, 172, 2, 194, 118, 172, 89, 18, 220, 52, 104, 99, 212, 94, 94,
                    115, 62, 158, 60, 228, 11, 155, 45, 78, 71, 4, 17, 225, 113,
                ],
                [
                    230, 170, 223, 56, 41, 114, 161, 86, 86, 108, 29, 117, 194, 233, 89, 180, 95,
                    29, 101, 241, 100, 22, 214, 133, 100, 81, 19, 239, 167, 110, 243, 41,
                ],
                [
                    56, 195, 2, 142, 121, 149, 214, 168, 38, 253, 192, 85, 230, 162, 12, 79, 16,
                    216, 226, 164, 59, 224, 245, 57, 16, 238, 167, 178, 116, 93, 234, 22, 49, 196,
                    73, 151, 221, 100, 8, 191, 202, 43, 220, 35, 57, 146, 127, 132, 251, 140, 255,
                    80, 26, 211, 26, 149, 187, 135, 207, 56, 173, 234, 203, 139,
                ],
            ),
            (
                0,
                did.clone(),
                [
                    190, 128, 200, 143, 231, 245, 82, 208, 67, 6, 20, 18, 89, 141, 2, 126, 113, 48,
                    191, 114, 134, 218, 113, 30, 104, 36, 161, 36, 182, 140, 227, 37,
                ],
                [
                    50, 222, 244, 240, 17, 191, 164, 128, 85, 13, 223, 6, 30, 89, 26, 200, 33, 135,
                    133, 63, 229, 187, 238, 211, 12, 14, 241, 47, 139, 160, 228, 7,
                ],
                [
                    54, 190, 21, 171, 35, 188, 85, 42, 7, 28, 82, 166, 90, 213, 135, 230, 140, 75,
                    187, 94, 66, 139, 93, 211, 244, 59, 8, 32, 208, 56, 120, 90, 210, 143, 166, 32,
                    193, 126, 246, 38, 134, 3, 159, 64, 205, 13, 162, 115, 229, 228, 38, 142, 39,
                    42, 192, 22, 225, 212, 9, 122, 50, 37, 76, 130,
                ],
            ),
        ];
        (
            data[index].0,
            data[index].1,
            PublicKey::Sr25519(Bytes32 {
                value: data[index].2,
            }),
            PublicKey::Sr25519(Bytes32 {
                value: data[index].3,
            }),
            DidSignature::Sr25519(Bytes64 {
                value: data[index].4,
            }),
        )
    } else if typ == 1 {
        // Ed25519
        let did = [2 as u8; DID_BYTE_SIZE];
        let data: [(u32, [u8; DID_BYTE_SIZE], [u8; 32], [u8; 32], [u8; 64]); DID_DATA_SIZE] = [
            (
                0,
                did.clone(),
                [
                    131, 15, 25, 210, 213, 218, 253, 12, 157, 235, 239, 4, 211, 109, 224, 82, 191,
                    0, 209, 69, 219, 110, 204, 203, 66, 194, 240, 108, 155, 177, 188, 171,
                ],
                [
                    3, 15, 46, 120, 252, 247, 100, 104, 40, 204, 93, 149, 78, 208, 25, 184, 58, 89,
                    76, 159, 152, 137, 83, 236, 103, 202, 25, 37, 125, 220, 162, 72,
                ],
                [
                    253, 103, 76, 69, 192, 237, 118, 76, 18, 98, 230, 194, 158, 138, 254, 90, 25,
                    119, 10, 61, 7, 67, 4, 193, 36, 204, 111, 190, 240, 234, 223, 233, 221, 146,
                    230, 27, 201, 141, 141, 251, 120, 109, 125, 133, 114, 34, 52, 178, 8, 56, 76,
                    151, 25, 244, 167, 240, 95, 244, 76, 170, 184, 81, 197, 10,
                ],
            ),
            (
                0,
                did.clone(),
                [
                    80, 48, 56, 102, 58, 188, 43, 227, 207, 206, 160, 121, 252, 164, 142, 248, 239,
                    168, 64, 98, 39, 232, 42, 3, 177, 91, 82, 16, 232, 170, 174, 47,
                ],
                [
                    75, 65, 17, 171, 200, 106, 61, 232, 178, 171, 106, 219, 106, 104, 45, 115, 25,
                    45, 227, 222, 114, 124, 185, 160, 48, 170, 141, 249, 251, 99, 106, 131,
                ],
                [
                    188, 165, 132, 83, 236, 192, 77, 241, 217, 102, 218, 223, 66, 193, 173, 74,
                    154, 116, 145, 79, 165, 155, 10, 150, 183, 84, 255, 76, 127, 110, 251, 181, 47,
                    38, 54, 89, 236, 116, 2, 64, 201, 171, 134, 20, 184, 173, 65, 216, 148, 14, 93,
                    40, 227, 93, 251, 47, 209, 200, 198, 15, 16, 108, 203, 9,
                ],
            ),
            (
                0,
                did.clone(),
                [
                    79, 244, 168, 193, 78, 132, 38, 74, 112, 134, 84, 173, 233, 227, 195, 75, 215,
                    27, 74, 22, 158, 40, 98, 87, 199, 251, 181, 234, 38, 243, 149, 146,
                ],
                [
                    24, 51, 195, 211, 228, 222, 217, 161, 109, 152, 23, 71, 33, 213, 118, 75, 76,
                    203, 159, 219, 224, 95, 206, 108, 53, 83, 31, 72, 34, 110, 100, 227,
                ],
                [
                    164, 184, 158, 18, 149, 107, 155, 212, 90, 43, 202, 235, 111, 66, 204, 82, 141,
                    84, 83, 103, 100, 214, 49, 193, 211, 205, 248, 116, 166, 124, 180, 223, 124,
                    37, 236, 90, 230, 33, 123, 140, 70, 252, 180, 58, 93, 245, 84, 65, 94, 115, 9,
                    38, 100, 223, 247, 253, 129, 237, 76, 144, 201, 176, 97, 4,
                ],
            ),
        ];
        (
            data[index].0,
            data[index].1,
            PublicKey::Ed25519(Bytes32 {
                value: data[index].2,
            }),
            PublicKey::Ed25519(Bytes32 {
                value: data[index].3,
            }),
            DidSignature::Ed25519(Bytes64 {
                value: data[index].4,
            }),
        )
    } else {
        // Secp256k1
        let did = [1 as u8; DID_BYTE_SIZE];
        let data: [(u32, [u8; DID_BYTE_SIZE], [u8; 33], [u8; 33], [u8; 65]); DID_DATA_SIZE] = [
            (
                0,
                did.clone(),
                [
                    2, 180, 242, 225, 24, 208, 87, 98, 140, 230, 3, 47, 174, 85, 210, 58, 135, 184,
                    224, 222, 1, 145, 31, 114, 231, 254, 40, 85, 12, 80, 77, 95, 56,
                ],
                [
                    2, 89, 190, 6, 18, 152, 28, 16, 116, 27, 64, 143, 115, 143, 91, 85, 4, 187,
                    182, 160, 46, 145, 125, 197, 113, 206, 223, 138, 48, 123, 211, 42, 194,
                ],
                [
                    163, 72, 171, 45, 212, 100, 105, 173, 221, 174, 28, 192, 175, 140, 214, 172,
                    176, 167, 196, 116, 183, 195, 24, 102, 159, 6, 184, 124, 16, 245, 117, 173, 41,
                    11, 167, 52, 206, 198, 85, 49, 160, 176, 92, 77, 171, 120, 158, 186, 212, 109,
                    28, 149, 53, 50, 139, 46, 58, 136, 37, 204, 254, 85, 97, 83, 1,
                ],
            ),
            (
                0,
                did.clone(),
                [
                    3, 168, 133, 14, 52, 97, 208, 163, 35, 151, 166, 128, 16, 224, 186, 26, 230,
                    111, 146, 50, 6, 186, 203, 110, 2, 50, 185, 159, 45, 228, 186, 64, 156,
                ],
                [
                    3, 22, 112, 95, 40, 42, 156, 138, 53, 75, 149, 238, 69, 212, 28, 136, 88, 238,
                    168, 5, 51, 34, 48, 69, 64, 85, 76, 181, 253, 127, 208, 111, 162,
                ],
                [
                    106, 25, 11, 135, 109, 90, 137, 134, 95, 252, 160, 65, 6, 19, 58, 222, 18, 49,
                    219, 115, 97, 222, 107, 230, 10, 224, 212, 133, 124, 78, 41, 196, 35, 165, 93,
                    16, 67, 147, 12, 187, 117, 58, 16, 152, 114, 225, 108, 29, 17, 44, 170, 175,
                    242, 48, 113, 183, 156, 225, 116, 73, 250, 11, 115, 236, 1,
                ],
            ),
            (
                0,
                did.clone(),
                [
                    3, 252, 3, 10, 195, 229, 228, 82, 46, 233, 185, 25, 202, 171, 232, 17, 76, 123,
                    3, 147, 96, 76, 30, 27, 31, 81, 214, 7, 45, 83, 75, 118, 252,
                ],
                [
                    2, 100, 4, 64, 55, 252, 133, 238, 169, 219, 39, 27, 56, 115, 111, 128, 110,
                    174, 209, 74, 49, 35, 8, 241, 164, 21, 67, 224, 140, 60, 247, 228, 175,
                ],
                [
                    127, 77, 162, 134, 172, 44, 254, 215, 137, 64, 82, 44, 184, 16, 240, 182, 203,
                    103, 44, 215, 252, 124, 233, 65, 99, 98, 81, 254, 37, 162, 2, 56, 114, 238, 53,
                    73, 172, 91, 239, 183, 114, 186, 112, 23, 228, 174, 14, 114, 48, 144, 87, 196,
                    55, 106, 87, 72, 239, 225, 132, 253, 15, 128, 225, 251, 0,
                ],
            ),
        ];
        (
            data[index].0,
            data[index].1,
            PublicKey::Secp256k1(Bytes33 {
                value: data[index].2,
            }),
            PublicKey::Secp256k1(Bytes33 {
                value: data[index].3,
            }),
            DidSignature::Secp256k1(Bytes65 {
                value: data[index].4,
            }),
        )
    }
}

/// Get nonce, DID, hardcoded keys and signature for did removal, `typ` can be only 0 for now can corresponds to sr25519.
/// `index` is the index in hardcoded data array.
pub fn get_data_for_did_removal(
    typ: u8,
    index: usize,
) -> (u32, [u8; DID_BYTE_SIZE], PublicKey, DidSignature) {
    assert!(typ < 3);
    assert!(index < DID_DATA_SIZE);
    if typ == 0 {
        // Sr25519
        let did = [1 as u8; DID_BYTE_SIZE];
        let data: [(u32, [u8; DID_BYTE_SIZE], [u8; 32], [u8; 64]); DID_DATA_SIZE] = [
            (
                0,
                did.clone(),
                [
                    198, 22, 226, 194, 146, 87, 84, 203, 51, 238, 64, 209, 198, 69, 164, 115, 239,
                    6, 73, 164, 130, 8, 182, 181, 216, 107, 142, 158, 78, 239, 146, 94,
                ],
                [
                    242, 94, 207, 16, 26, 94, 25, 99, 49, 91, 93, 202, 106, 124, 68, 63, 110, 241,
                    121, 129, 149, 242, 24, 57, 120, 224, 96, 238, 124, 35, 9, 113, 30, 77, 76,
                    158, 50, 182, 231, 21, 188, 139, 242, 243, 43, 236, 199, 102, 35, 158, 100, 70,
                    2, 10, 232, 245, 72, 247, 104, 80, 21, 213, 54, 136,
                ],
            ),
            (
                0,
                did.clone(),
                [
                    118, 177, 143, 130, 208, 27, 186, 178, 22, 237, 142, 20, 15, 137, 168, 13, 57,
                    79, 254, 150, 254, 168, 123, 72, 181, 55, 176, 24, 114, 10, 211, 113,
                ],
                [
                    30, 212, 249, 87, 104, 6, 161, 65, 248, 107, 146, 208, 212, 79, 169, 127, 246,
                    68, 91, 94, 126, 111, 169, 153, 255, 42, 2, 88, 137, 29, 39, 58, 191, 189, 175,
                    147, 252, 65, 199, 61, 215, 143, 178, 114, 219, 32, 185, 16, 0, 13, 21, 249,
                    29, 195, 19, 151, 59, 65, 106, 92, 25, 192, 207, 142,
                ],
            ),
            (
                0,
                did.clone(),
                [
                    56, 128, 162, 48, 53, 62, 28, 19, 87, 31, 197, 113, 67, 26, 180, 201, 159, 214,
                    180, 201, 236, 48, 69, 28, 171, 108, 211, 168, 4, 235, 212, 65,
                ],
                [
                    252, 100, 106, 94, 2, 210, 176, 91, 85, 208, 220, 162, 144, 150, 161, 232, 133,
                    80, 0, 114, 11, 174, 0, 47, 250, 33, 144, 107, 77, 68, 249, 26, 95, 74, 50, 21,
                    137, 241, 168, 21, 188, 186, 59, 169, 72, 92, 106, 92, 8, 92, 8, 156, 130, 110,
                    252, 195, 62, 85, 120, 85, 2, 131, 5, 139,
                ],
            ),
        ];
        (
            data[index].0,
            data[index].1,
            PublicKey::Sr25519(Bytes32 {
                value: data[index].2,
            }),
            DidSignature::Sr25519(Bytes64 {
                value: data[index].3,
            }),
        )
    } else {
        unimplemented!()
    }
}

/// Get hardcoded message, public key and signature for signature verification
pub fn get_data_for_sig_ver(typ: u8, index: usize) -> (Vec<u8>, PublicKey, DidSignature) {
    assert!(typ < 3);
    assert!(index < DID_DATA_SIZE);
    let msg_1 = [1 as u8; 8];
    let msg_2 = [1 as u8; 16];
    let msg_3 = [1 as u8; 24];
    if typ == 0 {
        let data: [(Vec<u8>, [u8; 32], [u8; 64]); DID_DATA_SIZE] = [
            (
                msg_1.to_vec(),
                [
                    202, 0, 231, 12, 70, 164, 43, 184, 191, 244, 10, 210, 102, 241, 169, 63, 141,
                    180, 51, 126, 115, 231, 214, 54, 246, 19, 135, 178, 157, 159, 239, 39,
                ],
                [
                    38, 84, 132, 196, 97, 226, 144, 80, 204, 34, 211, 17, 160, 137, 233, 51, 155,
                    168, 5, 210, 6, 162, 64, 70, 174, 22, 10, 210, 84, 64, 111, 16, 21, 162, 41,
                    34, 209, 233, 11, 39, 42, 245, 219, 22, 147, 143, 55, 231, 63, 228, 95, 41,
                    178, 9, 9, 130, 209, 29, 103, 98, 38, 36, 47, 132,
                ],
            ),
            (
                msg_2.to_vec(),
                [
                    42, 50, 48, 135, 188, 14, 70, 98, 84, 100, 51, 246, 214, 80, 245, 154, 207,
                    156, 167, 190, 61, 52, 176, 32, 13, 53, 186, 80, 196, 55, 176, 39,
                ],
                [
                    166, 93, 21, 64, 235, 26, 81, 122, 175, 106, 206, 141, 108, 195, 55, 203, 48,
                    253, 32, 79, 167, 228, 15, 95, 206, 199, 249, 18, 14, 25, 12, 25, 244, 15, 9,
                    69, 147, 212, 208, 13, 50, 147, 177, 55, 35, 232, 227, 227, 233, 99, 251, 143,
                    192, 242, 255, 240, 35, 211, 11, 198, 80, 200, 11, 141,
                ],
            ),
            (
                msg_3.to_vec(),
                [
                    0, 143, 120, 196, 36, 22, 10, 35, 218, 89, 68, 75, 69, 239, 51, 18, 88, 154,
                    20, 50, 11, 246, 229, 188, 3, 182, 184, 141, 138, 9, 210, 1,
                ],
                [
                    78, 146, 213, 237, 163, 116, 99, 177, 125, 166, 234, 31, 14, 66, 124, 185, 24,
                    118, 103, 26, 72, 38, 88, 238, 87, 137, 165, 209, 190, 102, 12, 64, 5, 47, 189,
                    215, 244, 157, 207, 219, 206, 110, 78, 0, 116, 221, 180, 72, 217, 107, 77, 127,
                    250, 106, 240, 183, 139, 62, 112, 214, 252, 91, 225, 128,
                ],
            ),
        ];
        (
            data[index].0.clone(),
            PublicKey::Sr25519(Bytes32 {
                value: data[index].1,
            }),
            DidSignature::Sr25519(Bytes64 {
                value: data[index].2,
            }),
        )
    } else if typ == 1 {
        let data: [(Vec<u8>, [u8; 32], [u8; 64]); DID_DATA_SIZE] = [
            (
                msg_1.to_vec(),
                [
                    2, 99, 88, 183, 102, 38, 205, 178, 227, 199, 107, 84, 224, 237, 234, 85, 53,
                    214, 192, 109, 157, 50, 143, 167, 190, 252, 241, 199, 7, 44, 178, 56,
                ],
                [
                    254, 83, 177, 91, 62, 66, 53, 135, 85, 21, 95, 242, 56, 35, 20, 6, 147, 85,
                    161, 242, 117, 62, 63, 75, 132, 176, 126, 107, 25, 158, 17, 119, 45, 74, 242,
                    134, 32, 129, 230, 67, 68, 138, 90, 117, 6, 17, 233, 47, 77, 202, 230, 102,
                    141, 71, 10, 156, 191, 164, 113, 237, 181, 72, 41, 6,
                ],
            ),
            (
                msg_2.to_vec(),
                [
                    224, 77, 233, 116, 93, 50, 162, 104, 127, 95, 107, 142, 17, 255, 176, 100, 100,
                    159, 208, 16, 245, 4, 193, 129, 105, 94, 155, 70, 4, 61, 212, 214,
                ],
                [
                    248, 65, 1, 195, 29, 249, 5, 100, 255, 146, 163, 182, 196, 189, 242, 43, 192,
                    1, 69, 250, 246, 46, 51, 169, 198, 120, 181, 254, 66, 20, 13, 64, 120, 130,
                    111, 171, 43, 10, 117, 7, 138, 251, 58, 187, 209, 64, 50, 250, 52, 9, 75, 141,
                    13, 198, 97, 237, 90, 239, 202, 219, 149, 103, 118, 14,
                ],
            ),
            (
                msg_3.to_vec(),
                [
                    22, 156, 0, 224, 118, 90, 36, 236, 223, 90, 215, 152, 26, 164, 69, 198, 151,
                    162, 104, 148, 59, 76, 50, 64, 235, 82, 136, 198, 162, 99, 241, 147,
                ],
                [
                    228, 93, 244, 235, 145, 188, 154, 212, 247, 218, 95, 51, 186, 214, 42, 162, 28,
                    248, 129, 67, 83, 221, 150, 195, 139, 83, 185, 57, 209, 41, 206, 173, 23, 179,
                    122, 65, 105, 77, 189, 143, 175, 104, 34, 138, 238, 74, 24, 92, 216, 136, 31,
                    4, 221, 118, 241, 35, 142, 222, 77, 194, 97, 240, 74, 1,
                ],
            ),
        ];
        (
            data[index].0.clone(),
            PublicKey::Ed25519(Bytes32 {
                value: data[index].1,
            }),
            DidSignature::Ed25519(Bytes64 {
                value: data[index].2,
            }),
        )
    } else {
        let data: [(Vec<u8>, [u8; 33], [u8; 65]); DID_DATA_SIZE] = [
            (
                msg_1.to_vec(),
                [
                    3, 128, 58, 161, 130, 189, 63, 254, 21, 193, 9, 112, 182, 124, 80, 146, 112,
                    26, 205, 2, 33, 35, 196, 204, 171, 43, 58, 118, 178, 117, 252, 254, 121,
                ],
                [
                    64, 196, 232, 173, 185, 250, 8, 251, 6, 93, 6, 254, 177, 145, 230, 101, 223,
                    114, 2, 146, 212, 80, 230, 127, 144, 6, 47, 113, 39, 226, 17, 148, 101, 251,
                    246, 161, 230, 26, 94, 189, 231, 61, 104, 115, 226, 11, 14, 58, 70, 23, 31,
                    247, 77, 182, 29, 210, 78, 108, 35, 156, 13, 71, 166, 251, 1,
                ],
            ),
            (
                msg_2.to_vec(),
                [
                    2, 113, 198, 225, 90, 82, 122, 173, 19, 38, 220, 74, 34, 24, 43, 145, 72, 0,
                    70, 202, 159, 111, 5, 94, 119, 100, 222, 97, 142, 245, 199, 107, 15,
                ],
                [
                    38, 59, 52, 140, 44, 82, 103, 134, 195, 62, 220, 47, 244, 220, 57, 236, 91,
                    230, 47, 202, 171, 179, 84, 156, 239, 86, 61, 161, 54, 71, 208, 204, 38, 51,
                    172, 210, 170, 65, 10, 142, 105, 133, 159, 187, 115, 28, 62, 28, 92, 229, 57,
                    49, 93, 164, 146, 42, 67, 10, 202, 220, 110, 40, 23, 179, 1,
                ],
            ),
            (
                msg_3.to_vec(),
                [
                    3, 52, 189, 77, 132, 8, 95, 119, 219, 157, 233, 169, 89, 202, 6, 97, 239, 162,
                    67, 203, 140, 241, 69, 19, 12, 173, 212, 223, 109, 122, 174, 187, 70,
                ],
                [
                    25, 27, 11, 183, 155, 56, 76, 240, 237, 195, 22, 202, 7, 193, 14, 103, 21, 12,
                    15, 66, 209, 234, 243, 64, 103, 176, 180, 175, 37, 196, 138, 252, 23, 142, 90,
                    104, 128, 94, 165, 129, 117, 50, 147, 101, 93, 227, 234, 34, 138, 141, 210,
                    185, 8, 83, 184, 144, 11, 4, 194, 20, 247, 134, 24, 225, 1,
                ],
            ),
        ];
        (
            data[index].0.clone(),
            PublicKey::Secp256k1(Bytes33 {
                value: data[index].1,
            }),
            DidSignature::Secp256k1(Bytes65 {
                value: data[index].2,
            }),
        )
    }
}

/// Get hardcoded nonce, public key, revocation ids and signature for revocation
pub fn get_data_for_revocation(index: usize) -> (u32, PublicKey, Vec<[u8; 32]>, DidSignature) {
    assert!(index < REV_DATA_SIZE);
    let pk: [u8; 32] = [
        76, 225, 1, 67, 209, 37, 80, 206, 149, 171, 152, 161, 19, 69, 190, 41, 234, 55, 4, 245, 42,
        237, 20, 208, 173, 64, 190, 136, 174, 153, 138, 110,
    ];
    if index == 0 {
        // 1 revocation id
        (
            0,
            PublicKey::Sr25519(Bytes32 { value: pk }),
            [[
                148, 108, 134, 12, 65, 79, 189, 228, 40, 146, 104, 21, 181, 194, 153, 140, 136, 24,
                170, 213, 148, 129, 180, 209, 65, 191, 27, 135, 171, 224, 214, 26,
            ]]
            .to_vec(),
            DidSignature::Sr25519(Bytes64 {
                value: [
                    122, 144, 87, 55, 186, 27, 172, 246, 135, 31, 106, 203, 228, 33, 91, 24, 57,
                    172, 56, 28, 76, 171, 109, 208, 106, 88, 174, 141, 100, 248, 181, 118, 29, 73,
                    40, 57, 19, 143, 141, 210, 96, 7, 29, 41, 200, 243, 102, 148, 59, 63, 89, 131,
                    92, 172, 229, 172, 22, 22, 91, 7, 41, 95, 0, 143,
                ],
            }),
        )
    } else if index == 1 {
        // 2 revocation ids
        (
            0,
            PublicKey::Sr25519(Bytes32 { value: pk }),
            [
                [
                    71, 73, 48, 6, 145, 71, 43, 201, 65, 139, 193, 16, 254, 112, 111, 207, 215, 46,
                    105, 122, 211, 130, 254, 127, 79, 94, 27, 122, 184, 195, 201, 122,
                ],
                [
                    206, 226, 146, 158, 115, 51, 103, 130, 62, 54, 176, 247, 42, 206, 244, 139, 6,
                    109, 222, 10, 81, 38, 228, 167, 49, 89, 69, 23, 219, 231, 149, 90,
                ],
            ]
            .to_vec(),
            DidSignature::Sr25519(Bytes64 {
                value: [
                    102, 18, 178, 139, 148, 97, 233, 110, 205, 50, 41, 28, 91, 108, 66, 30, 91,
                    221, 157, 207, 39, 63, 11, 68, 205, 152, 224, 106, 125, 135, 24, 117, 152, 198,
                    24, 137, 181, 110, 107, 14, 203, 246, 72, 231, 107, 171, 190, 243, 120, 115,
                    183, 199, 233, 105, 211, 75, 250, 238, 143, 210, 152, 193, 198, 143,
                ],
            }),
        )
    } else {
        // 3 revocation ids
        (
            0,
            PublicKey::Sr25519(Bytes32 { value: pk }),
            [
                [
                    89, 106, 252, 204, 111, 39, 179, 65, 21, 213, 17, 39, 198, 89, 42, 2, 143, 184,
                    254, 64, 8, 152, 84, 170, 106, 35, 56, 220, 176, 79, 191, 120,
                ],
                [
                    229, 38, 239, 226, 45, 229, 56, 195, 0, 29, 185, 96, 40, 166, 152, 24, 107,
                    103, 238, 34, 31, 124, 248, 139, 149, 84, 125, 83, 113, 89, 20, 252,
                ],
                [
                    91, 141, 92, 65, 245, 204, 218, 239, 196, 113, 98, 23, 79, 191, 26, 75, 202,
                    198, 42, 22, 108, 226, 209, 172, 15, 121, 220, 14, 183, 154, 163, 5,
                ],
            ]
            .to_vec(),
            DidSignature::Sr25519(Bytes64 {
                value: [
                    56, 21, 0, 86, 123, 202, 111, 129, 160, 120, 15, 134, 207, 143, 175, 3, 20,
                    188, 110, 77, 226, 139, 248, 122, 86, 128, 240, 185, 193, 198, 240, 121, 203,
                    91, 242, 226, 12, 140, 128, 151, 43, 62, 218, 119, 13, 176, 229, 3, 143, 251,
                    155, 7, 209, 178, 241, 251, 186, 141, 206, 158, 70, 173, 224, 129,
                ],
            }),
        )
    }
}

/// Get hardcoded nonce, public key, revocation ids and signature for unrevocation
pub fn get_data_for_unrevocation(index: usize) -> (u32, PublicKey, Vec<[u8; 32]>, DidSignature) {
    assert!(index < REV_DATA_SIZE);
    let pk: [u8; 32] = [
        86, 125, 238, 179, 191, 9, 254, 36, 131, 157, 20, 17, 237, 106, 7, 66, 47, 82, 68, 19, 0,
        96, 206, 221, 67, 55, 242, 86, 59, 123, 7, 62,
    ];
    if index == 0 {
        // 1 revocation id
        (
            0,
            PublicKey::Sr25519(Bytes32 { value: pk }),
            [[
                18, 170, 162, 59, 189, 209, 148, 117, 61, 243, 168, 154, 169, 226, 129, 183, 160,
                202, 55, 77, 239, 33, 178, 86, 157, 173, 238, 39, 31, 146, 253, 133,
            ]]
            .to_vec(),
            DidSignature::Sr25519(Bytes64 {
                value: [
                    88, 197, 120, 7, 48, 55, 62, 222, 203, 170, 50, 21, 250, 238, 175, 167, 161,
                    76, 156, 151, 219, 254, 223, 34, 219, 11, 128, 0, 142, 8, 182, 110, 254, 18,
                    183, 145, 45, 185, 8, 235, 194, 143, 1, 148, 254, 38, 209, 8, 226, 115, 185,
                    234, 83, 139, 96, 115, 102, 166, 118, 8, 15, 152, 20, 143,
                ],
            }),
        )
    } else if index == 1 {
        // 2 revocation ids
        (
            0,
            PublicKey::Sr25519(Bytes32 { value: pk }),
            [
                [
                    18, 170, 162, 59, 189, 209, 148, 117, 61, 243, 168, 154, 169, 226, 129, 183,
                    160, 202, 55, 77, 239, 33, 178, 86, 157, 173, 238, 39, 31, 146, 253, 133,
                ],
                [
                    122, 46, 95, 233, 87, 239, 220, 24, 25, 57, 8, 234, 187, 50, 184, 94, 9, 215,
                    138, 182, 210, 67, 46, 180, 129, 42, 111, 21, 134, 139, 212, 21,
                ],
            ]
            .to_vec(),
            DidSignature::Sr25519(Bytes64 {
                value: [
                    228, 160, 123, 42, 226, 3, 237, 61, 118, 78, 32, 199, 65, 95, 143, 191, 251,
                    210, 95, 160, 147, 16, 97, 228, 90, 30, 213, 239, 222, 32, 51, 5, 16, 64, 95,
                    241, 62, 83, 10, 94, 19, 189, 250, 119, 73, 54, 87, 19, 54, 64, 128, 176, 163,
                    20, 2, 39, 107, 129, 40, 87, 44, 28, 135, 143,
                ],
            }),
        )
    } else {
        // 3 revocation ids
        (
            0,
            PublicKey::Sr25519(Bytes32 { value: pk }),
            [
                [
                    18, 170, 162, 59, 189, 209, 148, 117, 61, 243, 168, 154, 169, 226, 129, 183,
                    160, 202, 55, 77, 239, 33, 178, 86, 157, 173, 238, 39, 31, 146, 253, 133,
                ],
                [
                    122, 46, 95, 233, 87, 239, 220, 24, 25, 57, 8, 234, 187, 50, 184, 94, 9, 215,
                    138, 182, 210, 67, 46, 180, 129, 42, 111, 21, 134, 139, 212, 21,
                ],
                [
                    175, 228, 245, 38, 26, 216, 203, 172, 154, 52, 0, 9, 5, 106, 88, 16, 145, 189,
                    200, 215, 147, 120, 215, 49, 44, 129, 121, 107, 164, 184, 216, 195,
                ],
            ]
            .to_vec(),
            DidSignature::Sr25519(Bytes64 {
                value: [
                    208, 77, 15, 48, 218, 134, 34, 60, 65, 113, 176, 110, 48, 4, 164, 73, 61, 163,
                    77, 228, 94, 35, 85, 76, 34, 63, 219, 14, 35, 218, 97, 54, 236, 33, 246, 133,
                    88, 135, 7, 91, 26, 41, 127, 158, 141, 177, 130, 25, 106, 67, 205, 42, 11, 144,
                    196, 203, 207, 58, 150, 5, 47, 175, 255, 142,
                ],
            }),
        )
    }
}

/// Get hardcoded nonce, public key and signature for registry removal
pub fn get_data_for_remove() -> (u32, PublicKey, DidSignature) {
    let pk: [u8; 32] = [
        218, 250, 63, 166, 122, 73, 74, 124, 18, 228, 65, 176, 211, 158, 182, 63, 53, 223, 199,
        104, 161, 75, 74, 142, 55, 207, 193, 118, 124, 214, 192, 92,
    ];
    let sig: [u8; 64] = [
        144, 16, 119, 6, 77, 121, 139, 111, 98, 162, 196, 176, 23, 218, 78, 142, 53, 150, 136, 237,
        154, 249, 192, 160, 229, 61, 21, 71, 1, 217, 65, 41, 212, 206, 253, 96, 29, 179, 136, 0,
        170, 34, 133, 65, 88, 111, 182, 203, 82, 82, 114, 71, 36, 155, 81, 28, 112, 57, 199, 4, 77,
        52, 203, 138,
    ];
    (
        0,
        PublicKey::Sr25519(Bytes32 { value: pk }),
        DidSignature::Sr25519(Bytes64 { value: sig }),
    )
}

/// Get hardcoded DID, public key, blob id, blob content and signature for blob creation
pub fn get_data_for_blob(
    index: usize,
) -> (
    [u8; DID_BYTE_SIZE],
    PublicKey,
    [u8; ID_BYTE_SIZE],
    Vec<u8>,
    DidSignature,
) {
    assert!(index < BLOB_DATA_SIZE);
    if index == 0 {
        (
            [
                161, 83, 8, 252, 207, 211, 140, 101, 66, 236, 35, 44, 243, 222, 181, 79, 23, 111,
                41, 55, 231, 243, 190, 131, 23, 88, 84, 92, 6, 22, 3, 132,
            ],
            PublicKey::Sr25519(Bytes32 {
                value: [
                    224, 100, 94, 242, 75, 8, 167, 224, 130, 147, 48, 82, 125, 176, 1, 177, 84,
                    184, 11, 6, 176, 151, 28, 18, 183, 121, 96, 231, 221, 69, 151, 58,
                ],
            }),
            [
                40, 135, 30, 0, 193, 41, 239, 21, 109, 0, 236, 11, 126, 173, 221, 218, 157, 145,
                17, 117, 185, 228, 243, 200, 150, 160, 47, 244, 60, 127, 171, 183,
            ],
            [
                145, 62, 45, 142, 55, 141, 60, 50, 203, 184, 38, 140, 214, 134, 64, 205, 143, 201,
                38, 102, 163, 153, 24, 147, 14, 215, 13, 235, 100, 117, 125, 122, 243, 86, 34, 72,
                233, 202, 87, 230, 94, 175, 109, 30, 190, 194, 238, 249, 123, 188, 177, 125, 101,
                46, 49, 87, 232, 55, 83, 117, 193, 97, 72, 187, 185, 130, 67, 228, 112, 196, 143,
                2, 235, 78, 235, 188, 90, 111, 98, 128, 7, 57, 249, 147, 85, 64, 191, 184, 39, 215,
                237, 130, 123, 27, 30, 183, 163, 74, 49, 225, 1, 151, 142, 91, 66, 125, 71, 149,
                132, 84, 206, 127, 190, 122, 253, 28, 75, 169, 90, 190, 16, 206, 16, 251, 231, 129,
                121, 181, 237, 6, 34, 231, 41, 113, 179, 104, 138, 70, 122, 220, 218, 1, 197, 93,
                46, 61, 181, 142, 57, 152, 168, 141, 67, 145, 176, 199, 73, 69, 20, 91, 169, 178,
                113, 235, 222, 7, 29, 50, 96, 189, 229, 48, 108, 84, 107, 83, 136, 148, 85, 142,
                130, 129, 65, 220, 23, 57, 75, 209, 30, 125, 241, 56, 236, 66, 217, 203, 211, 77,
                49, 253, 241, 115, 41, 246, 6, 94, 249, 242, 162, 130, 193, 115, 174, 70, 252, 138,
                233, 154, 59, 47, 238, 140, 201, 122, 74, 72, 10, 186, 67, 86, 160, 101, 247, 10,
                252, 20, 119, 128, 130, 168, 18, 187, 191, 231, 99, 22, 226, 246, 24, 227, 6, 198,
                30, 253, 242, 14, 139, 242, 59, 73, 135, 210, 141, 111, 224, 149, 247, 184, 238,
                201, 176, 137, 21, 90, 20, 0, 148, 30, 92, 202, 200, 39, 190, 20, 167, 183, 249,
                211, 93, 190, 166, 1, 111, 27, 27, 117, 82, 234, 143, 169, 55, 37, 60, 161, 216,
                83, 60, 143, 85, 202, 201, 125, 95, 80, 187, 246, 88, 206, 246, 10, 2, 104, 87,
                181, 167, 57, 24, 198, 28, 133, 24, 77, 0, 67, 56, 134, 189, 17, 89, 4, 97, 94,
                216, 227, 43, 234, 64, 91, 221, 229, 234, 126, 79, 74, 66, 98, 229, 253, 212, 77,
                126, 44, 230, 11, 173, 136, 215, 40, 114, 162, 172, 170, 52, 228, 77, 174, 152,
                209, 116, 236, 193, 19, 164, 173, 108, 101, 217, 166, 83, 150, 216, 194, 71, 111,
                250, 93, 27, 77, 66, 23, 137, 19, 42, 16, 76, 216, 96, 33, 18, 255, 156, 216, 162,
                58, 121, 180, 13, 153, 70, 249, 161, 232, 65, 102, 218, 79, 100, 254, 163, 165, 64,
                115, 16, 70, 253, 39, 161, 35, 160, 181, 190, 70, 194, 222, 202, 175, 73, 177, 191,
                96, 140, 52, 182, 3, 143, 214, 114, 135, 139, 106, 123, 81, 190, 144, 61, 61, 223,
                143, 191, 243, 212, 176, 37, 228, 125, 145, 69, 247, 44, 124, 134, 232, 75, 209,
                64, 137, 62, 88, 140, 105, 31, 238, 165, 68, 253, 10, 172, 65, 154, 61, 3, 171, 38,
                17, 17, 44, 136, 122, 104, 214, 82, 4, 254, 14, 186, 24, 220, 192, 161, 100, 107,
                219, 121, 191, 28, 103, 41, 229, 6, 255, 194, 52, 80, 85, 78, 79, 92, 83, 62, 187,
                28, 116, 200, 219, 156, 64, 134, 50, 107, 23, 118, 187, 227, 117, 44, 110, 23, 46,
                32, 115, 147, 81, 13, 34, 234, 10, 15, 223, 124, 249, 133, 10, 149, 6, 147, 95,
                221, 176, 157, 47, 100, 251, 245, 81, 98, 38, 191, 136, 159, 216, 204, 130, 166,
                189, 97, 252, 71, 159, 33, 196, 100, 73, 120, 89, 240, 164, 159, 96, 163, 62, 37,
                99, 134, 199, 251, 248, 84, 161, 13, 112, 18, 242, 198, 222, 218, 34, 171, 242,
                150, 115, 15, 106, 88, 209, 93, 186, 251, 53, 33, 139, 183, 182, 100, 249, 215,
                213, 199, 12, 168, 100, 232, 88, 93, 234, 95, 18, 118, 90, 25, 235, 40, 38, 20,
                239, 64, 65, 11, 119, 118, 61, 88, 145, 13, 223, 244, 140, 103, 189, 50, 171, 44,
                6, 38, 150, 31, 130, 242, 150, 90, 210, 146, 20, 178, 141, 7, 149, 33, 147, 58,
                190, 55, 105, 228, 179, 125, 51, 11, 54, 169, 254, 57, 98, 147, 46, 186, 138, 215,
                203, 63, 122, 116, 105, 116, 46, 185, 8, 69, 233, 34, 5, 127, 40, 7, 3, 197, 4, 50,
                181, 254, 27, 89, 122, 76, 13, 58, 157, 36, 203, 192, 78, 164, 234, 178, 14, 156,
                26, 242, 185, 86, 112, 96, 118, 65, 38, 145, 25, 192, 200, 147, 239, 42, 29, 7,
                176, 8, 200, 79, 128, 209, 114, 117, 189, 46, 24, 125, 96, 7, 18, 227, 75, 157,
                255, 174, 6, 187, 14, 185, 71, 31, 247, 25, 182, 101, 25, 160, 195, 10, 7, 35, 208,
                81, 94, 21, 64, 157, 97, 13, 15, 61, 173, 55, 238, 131, 28, 33, 166, 64, 241, 159,
                121, 182, 75, 134, 146, 190, 171, 90, 94, 178, 98, 84, 151, 116, 97, 56, 11, 28,
                111, 199, 75, 18, 222, 157, 252, 175, 227, 75, 67, 227, 191, 164, 165, 214, 184,
                226, 14, 159, 161, 52, 237, 5, 20, 59, 125, 255, 246, 229, 14, 184, 81, 134, 158,
                198, 58, 115, 185, 226, 214, 140, 252, 200, 37, 45, 253, 176, 79, 254, 59, 55, 78,
                95, 92, 186, 26, 83, 44, 41, 254, 196, 246, 33, 61, 41, 230, 55, 242, 21, 140, 58,
                202, 121, 97, 82, 128, 90, 165, 12, 81, 198, 134, 70, 29, 180, 78, 213, 75, 213,
                155, 142, 204, 30, 74, 212, 255, 249, 60, 38, 56, 239, 118, 111, 81, 6, 16, 3, 57,
                188, 52, 41, 183, 206, 93, 129, 219, 243, 99, 31, 200, 136, 40, 36, 21, 191, 89,
                248, 23, 255, 27, 112, 129, 49, 115, 42, 1, 110, 197, 101, 51, 142, 133, 244, 113,
                133, 166, 56, 87, 27, 149, 34, 41, 17, 211, 46, 180, 29, 154, 95, 13, 112, 150, 10,
                168, 211, 11, 21, 36, 169, 38, 102, 58, 176, 207, 45,
            ]
            .to_vec(),
            DidSignature::Sr25519(Bytes64 {
                value: [
                    230, 57, 231, 134, 108, 185, 119, 244, 58, 154, 253, 13, 128, 235, 70, 163,
                    203, 59, 186, 32, 168, 4, 199, 57, 203, 208, 125, 135, 76, 218, 229, 37, 19,
                    216, 84, 192, 118, 201, 90, 30, 36, 42, 90, 227, 60, 188, 30, 53, 150, 42, 70,
                    156, 14, 176, 141, 87, 86, 83, 87, 254, 35, 78, 251, 143,
                ],
            }),
        )
    } else if index == 1 {
        (
            [
                158, 222, 17, 47, 203, 187, 187, 7, 220, 170, 126, 37, 247, 150, 30, 179, 245, 197,
                97, 248, 182, 135, 219, 239, 125, 220, 231, 213, 139, 188, 105, 158,
            ],
            PublicKey::Sr25519(Bytes32 {
                value: [
                    242, 59, 168, 112, 65, 12, 27, 66, 105, 17, 110, 218, 36, 195, 118, 241, 181,
                    19, 37, 123, 144, 246, 157, 68, 66, 27, 244, 16, 150, 167, 8, 45,
                ],
            }),
            [
                80, 47, 250, 55, 158, 69, 188, 111, 17, 192, 170, 158, 152, 47, 158, 234, 52, 31,
                22, 165, 48, 66, 29, 51, 91, 240, 253, 182, 34, 157, 85, 87,
            ],
            [
                104, 71, 159, 150, 85, 186, 175, 109, 17, 41, 153, 116, 189, 62, 134, 193, 236,
                230, 31, 81, 139, 187, 232, 13, 180, 199, 50, 21, 103, 17, 207, 187, 171, 30, 242,
                157, 230, 204, 238, 71, 80, 236, 177, 223, 244, 225, 241, 214, 220, 18, 56, 139,
                84, 50, 184, 179, 12, 225, 97, 153, 62, 144, 167, 90, 111, 65, 101, 191, 15, 163,
                202, 150, 179, 184, 211, 65, 231, 200, 29, 59, 8, 230, 38, 36, 198, 130, 148, 77,
                12, 141, 55, 222, 21, 245, 117, 169, 63, 221, 255, 56, 140, 17, 168, 131, 32, 18,
                44, 141, 0, 202, 143, 131, 69, 138, 189, 35, 197, 37, 87, 245, 248, 136, 170, 253,
                49, 132, 175, 63, 80, 36, 232, 16, 228, 43, 227, 141, 106, 38, 186, 15, 145, 227,
                133, 102, 222, 6, 97, 68, 59, 169, 126, 195, 147, 239, 76, 22, 175, 116, 240, 172,
                39, 78, 101, 138, 178, 159, 79, 119, 210, 155, 147, 189, 58, 60, 219, 112, 219,
                215, 13, 150, 132, 171, 142, 185, 80, 138, 224, 164, 142, 175, 216, 67, 77, 155,
                42, 101, 3, 133, 199, 201, 3, 40, 89, 100, 85, 66, 61, 73, 1, 33, 149, 62, 81, 250,
                151, 60, 54, 159, 242, 185, 52, 112, 61, 140, 244, 172, 94, 177, 70, 165, 236, 153,
                118, 170, 162, 18, 50, 90, 191, 120, 0, 147, 94, 37, 236, 218, 112, 85, 61, 240,
                80, 101, 203, 188, 104, 29, 204, 181, 147, 192, 246, 158, 99, 68, 75, 159, 20, 193,
                36, 229, 17, 34, 39, 106, 130, 85, 84, 55, 26, 31, 8, 125, 128, 54, 90, 126, 2,
                227, 124, 72, 224, 129, 242, 23, 190, 69, 145, 25, 43, 165, 110, 93, 189, 41, 133,
                111, 69, 185, 236, 112, 231, 52, 199, 3, 130, 89, 164, 252, 45, 64, 140, 87, 109,
                198, 150, 94, 60, 94, 241, 148, 191, 61, 175, 187, 151, 234, 198, 96, 102, 110, 16,
                70, 118, 52, 74, 204, 7, 8, 141, 237, 108, 44, 95, 98, 120, 86, 140, 240, 206, 184,
                3, 206, 33, 20, 228, 61, 143, 49, 70, 49, 237, 2, 113, 99, 33, 220, 141, 177, 48,
                8, 75, 139, 122, 200, 143, 37, 110, 64, 140, 42, 107, 211, 44, 1, 135, 241, 80,
                111, 241, 253, 30, 53, 246, 56, 207, 14, 237, 247, 42, 34, 155, 222, 194, 251, 16,
                27, 78, 167, 185, 240, 68, 201, 172, 208, 148, 161, 17, 56, 129, 148, 190, 34, 184,
                71, 16, 89, 227, 55, 31, 255, 191, 153, 164, 9, 19, 206, 245, 188, 39, 194, 213,
                162, 156, 168, 31, 21, 217, 220, 208, 192, 233, 38, 190, 97, 104, 212, 31, 123, 37,
                198, 92, 82, 163, 189, 94, 182, 230, 96, 51, 24, 147, 119, 101, 125, 27, 196, 74,
                107, 215, 119, 2, 110, 251, 150, 29, 18, 79, 2, 139, 93, 30, 91, 127, 47, 187, 190,
                211, 126, 221, 109, 128, 228, 70, 159, 18, 95, 17, 229, 86, 213, 88, 86, 165, 120,
                24, 120, 196, 19, 112, 250, 173, 58, 34, 245, 152, 106, 178, 147, 129, 244, 94,
                120, 81, 213, 47, 48, 169, 208, 184, 106, 233, 100, 55, 222, 174, 40, 37, 169, 3,
                86, 229, 246, 18, 234, 107, 57, 166, 34, 124, 233, 168, 149, 216, 77, 6, 139, 68,
                16, 144, 166, 125, 1, 101, 34, 105, 252, 90, 96, 46, 179, 194, 171, 174, 170, 16,
                224, 253, 173, 10, 72, 162, 151, 191, 46, 174, 40, 151, 97, 227, 69, 163, 219, 182,
                108, 101, 152, 167, 130, 108, 133, 191, 47, 247, 61, 89, 67, 206, 160, 178, 216,
                129, 76, 2, 3, 67, 112, 129, 132, 119, 225, 160, 227, 224, 97, 215, 15, 236, 200,
                202, 165, 154, 16, 110, 17, 34, 178, 203, 97, 195, 112, 151, 88, 102, 120, 193, 92,
                96, 161, 91, 245, 212, 164, 131, 172, 74, 186, 168, 227, 110, 160, 131, 159, 95,
                172, 50, 112, 22, 166, 171, 127, 84, 19, 180, 141, 216, 158, 105, 41, 255, 239,
                181, 52, 250, 173, 208, 93, 244, 254, 131, 17, 203, 51, 109, 200, 176, 23, 118,
                167, 68, 26, 74, 59, 120, 81, 23, 130, 50, 187, 127, 66, 230, 179, 206, 206, 48,
                72, 109, 251, 169, 74, 164, 50, 52, 65, 4, 14, 51, 118, 118, 107, 27, 145, 45, 142,
                99, 32, 174, 75, 20, 245, 32, 150, 10, 31, 138, 247, 21, 228, 29, 97, 226, 58, 59,
                189, 89, 249, 60, 68, 13, 62, 49, 56, 89, 13, 248, 160, 167, 210, 91, 169, 74, 128,
                204, 175, 140, 166, 175, 216, 154, 1, 162, 214, 153, 90, 110, 216, 209, 34, 152,
                245, 243, 251, 42, 128, 178, 28, 136, 170, 79, 138, 6, 186, 32, 172, 10, 159, 112,
                136, 174, 191, 126, 181, 75, 255, 197, 11, 6, 24, 191, 202, 216, 185, 249, 206,
                249, 174, 228, 242, 19, 135, 112, 161, 139, 181, 19, 241, 109, 222, 223, 149, 148,
                110, 133, 134, 232, 39, 44, 60, 167, 203, 155, 201, 221, 174, 176, 95, 66, 89, 3,
                42, 11, 197, 117, 196, 26, 70, 219, 102, 100, 134, 197, 180, 84, 35, 65, 9, 95, 58,
                160, 32, 4, 163, 193, 63, 18, 19, 149, 166, 57, 16, 189, 239, 28, 198, 87, 68, 45,
                26, 209, 237, 242, 219, 160, 58, 144, 122, 60, 186, 76, 7, 171, 96, 40, 213, 139,
                244, 101, 167, 60, 217, 41, 251, 234, 120, 213, 120, 69, 73, 220, 28, 93, 164, 27,
                235, 93, 250, 243, 154, 173, 204, 200, 85, 4, 106, 188, 154, 29, 22, 56, 229, 246,
                20, 86, 106, 196, 127, 104, 6, 109, 177, 196, 255, 66, 124, 160, 31, 184, 193, 117,
                245, 14, 127, 160, 249, 18, 162, 135, 49, 101, 253, 146, 111, 8, 232, 170, 236,
                139, 209, 86, 50, 52, 96, 117, 71, 176, 86, 5, 178, 214, 50, 19, 161,
            ]
            .to_vec(),
            DidSignature::Sr25519(Bytes64 {
                value: [
                    56, 57, 92, 40, 154, 148, 72, 30, 91, 212, 140, 74, 255, 195, 128, 18, 196, 71,
                    88, 95, 4, 112, 237, 209, 78, 185, 58, 63, 88, 131, 3, 119, 45, 33, 37, 246,
                    148, 159, 18, 102, 31, 133, 8, 21, 170, 158, 26, 192, 179, 217, 195, 118, 48,
                    63, 135, 95, 3, 137, 148, 151, 69, 193, 211, 128,
                ],
            }),
        )
    } else {
        (
            [
                250, 136, 201, 251, 110, 189, 81, 242, 62, 98, 21, 136, 170, 40, 27, 99, 86, 149,
                167, 18, 208, 182, 250, 214, 110, 41, 26, 43, 138, 178, 112, 41,
            ],
            PublicKey::Sr25519(Bytes32 {
                value: [
                    92, 139, 150, 166, 94, 15, 73, 116, 104, 124, 33, 52, 119, 22, 114, 215, 222,
                    101, 245, 216, 224, 155, 68, 4, 128, 179, 90, 32, 205, 162, 146, 55,
                ],
            }),
            [
                138, 75, 216, 60, 45, 99, 27, 141, 52, 15, 254, 238, 201, 63, 162, 2, 105, 53, 127,
                45, 218, 89, 52, 92, 37, 184, 198, 137, 106, 153, 7, 145,
            ],
            [
                212, 231, 108, 206, 3, 140, 89, 180, 132, 88, 155, 21, 188, 196, 90, 71, 36, 219,
                189, 141, 104, 221, 77, 137, 43, 222, 228, 173, 200, 205, 183, 105, 136, 151, 82,
                182, 26, 77, 252, 240, 18, 194, 190, 121, 203, 18, 140, 200, 218, 69, 34, 208, 225,
                88, 251, 111, 33, 207, 174, 96, 43, 73, 141, 154, 84, 48, 242, 246, 246, 107, 107,
                209, 128, 82, 144, 26, 162, 116, 247, 35, 8, 1, 206, 186, 18, 8, 239, 247, 160,
                163, 18, 92, 89, 100, 191, 110, 9, 220, 249, 255, 244, 157, 18, 194, 176, 80, 59,
                30, 239, 217, 168, 70, 165, 30, 21, 73, 97, 17, 49, 155, 66, 124, 203, 231, 171,
                184, 96, 169, 161, 15, 43, 191, 20, 19, 81, 25, 67, 69, 96, 172, 131, 155, 47, 67,
                18, 106, 69, 242, 126, 127, 80, 193, 173, 212, 47, 82, 233, 77, 236, 15, 199, 175,
                86, 26, 125, 68, 13, 193, 116, 145, 28, 211, 19, 143, 167, 252, 225, 103, 220, 140,
                91, 102, 148, 5, 33, 108, 96, 42, 146, 235, 116, 207, 215, 141, 88, 129, 56, 174,
                174, 167, 52, 112, 10, 89, 223, 244, 182, 243, 221, 123, 130, 139, 248, 32, 245,
                127, 122, 135, 234, 157, 87, 115, 104, 13, 241, 154, 163, 121, 18, 126, 154, 165,
                186, 184, 246, 32, 7, 252, 22, 179, 54, 28, 54, 226, 217, 114, 157, 165, 139, 182,
                16, 248, 232, 143, 61, 218, 18, 153, 101, 101, 161, 222, 191, 24, 53, 105, 137,
                158, 214, 74, 215, 227, 43, 44, 213, 72, 136, 40, 149, 157, 193, 230, 246, 231,
                205, 19, 220, 8, 108, 210, 25, 126, 139, 234, 195, 231, 41, 217, 68, 152, 120, 224,
                122, 161, 195, 165, 160, 183, 62, 66, 15, 255, 104, 121, 128, 76, 152, 222, 86,
                169, 170, 98, 86, 156, 205, 170, 190, 240, 91, 232, 244, 60, 187, 211, 61, 209,
                102, 22, 211, 135, 17, 170, 104, 242, 220, 119, 249, 128, 140, 227, 186, 197, 229,
                207, 71, 228, 63, 209, 32, 208, 26, 152, 86, 200, 153, 112, 176, 104, 140, 32, 181,
                245, 81, 141, 230, 219, 244, 57, 238, 178, 172, 88, 15, 0, 105, 8, 86, 101, 89,
                253, 94, 54, 37, 138, 142, 122, 123, 196, 178, 4, 188, 117, 147, 76, 108, 146, 35,
                180, 76, 167, 211, 220, 28, 30, 34, 12, 64, 115, 236, 255, 16, 131, 175, 124, 228,
                114, 130, 233, 30, 17, 39, 66, 27, 255, 60, 112, 99, 185, 25, 192, 79, 109, 167,
                60, 67, 142, 101, 14, 79, 141, 14, 206, 61, 47, 54, 203, 178, 4, 206, 149, 253,
                225, 25, 86, 247, 168, 226, 110, 222, 237, 198, 147, 5, 221, 168, 134, 126, 215,
                107, 65, 43, 170, 47, 2, 200, 131, 194, 93, 175, 30, 94, 111, 137, 92, 0, 214, 211,
                154, 109, 94, 21, 64, 183, 48, 147, 245, 206, 21, 10, 207, 100, 11, 10, 62, 157,
                103, 15, 242, 52, 92, 2, 189, 34, 0, 134, 192, 3, 169, 142, 222, 180, 56, 16, 37,
                111, 3, 52, 142, 198, 124, 115, 203, 5, 209, 173, 248, 160, 52, 36, 95, 47, 197,
                135, 148, 54, 143, 60, 220, 82, 77, 47, 222, 227, 63, 160, 109, 97, 148, 121, 254,
                193, 209, 79, 244, 255, 189, 58, 246, 163, 248, 213, 0, 192, 58, 175, 43, 13, 78,
                175, 182, 221, 66, 48, 81, 254, 188, 167, 196, 178, 39, 182, 160, 234, 156, 153,
                97, 1, 168, 151, 20, 170, 118, 39, 148, 23, 22, 69, 106, 174, 99, 197, 1, 95, 180,
                232, 241, 128, 231, 212, 203, 201, 243, 43, 190, 145, 19, 212, 228, 183, 208, 43,
                185, 173, 162, 168, 30, 194, 113, 45, 175, 104, 129, 3, 30, 95, 121, 46, 50, 232,
                46, 155, 18, 28, 36, 155, 69, 244, 255, 177, 230, 184, 105, 7, 160, 102, 184, 232,
                204, 166, 200, 6, 63, 149, 33, 135, 234, 189, 92, 221, 58, 121, 69, 133, 51, 229,
                201, 160, 129, 62, 130, 42, 22, 75, 68, 3, 76, 115, 57, 187, 24, 194, 164, 218,
                239, 62, 68, 171, 242, 79, 126, 252, 72, 253, 27, 212, 37, 194, 56, 66, 72, 83,
                211, 132, 155, 143, 77, 159, 23, 203, 0, 226, 235, 42, 78, 148, 183, 192, 110, 203,
                48, 10, 75, 242, 40, 26, 205, 104, 111, 136, 52, 218, 46, 251, 105, 125, 233, 189,
                204, 54, 46, 126, 166, 116, 189, 124, 112, 235, 174, 72, 119, 10, 173, 175, 83,
                209, 231, 77, 236, 225, 106, 18, 6, 243, 170, 76, 195, 46, 250, 209, 125, 232, 18,
                203, 103, 34, 44, 95, 15, 178, 59, 48, 213, 29, 151, 89, 84, 68, 247, 40, 196, 145,
                156, 18, 137, 222, 139, 249, 191, 251, 126, 250, 0, 220, 137, 161, 222, 222, 27,
                165, 83, 228, 26, 127, 14, 12, 141, 182, 46, 164, 124, 94, 64, 227, 215, 205, 149,
                44, 16, 132, 120, 174, 240, 167, 68, 222, 83, 130, 88, 204, 255, 55, 37, 18, 209,
                83, 229, 154, 131, 82, 48, 163, 233, 185, 81, 17, 50, 82, 244, 61, 93, 141, 16,
                180, 52, 136, 105, 106, 22, 193, 95, 246, 177, 77, 245, 133, 90, 130, 182, 45, 247,
                132, 104, 246, 110, 82, 17, 180, 18, 189, 235, 1, 196, 103, 28, 32, 208, 95, 9, 5,
                236, 209, 195, 112, 124, 108, 96, 98, 46, 108, 126, 172, 249, 44, 253, 231, 144,
                79, 105, 12, 137, 226, 132, 129, 27, 76, 66, 72, 6, 198, 63, 163, 249, 91, 127, 73,
                24, 6, 27, 139, 210, 216, 76, 65, 9, 113, 132, 151, 196, 201, 249, 40, 205, 157,
                76, 40, 251, 2, 26, 239, 159, 244, 8, 44, 193, 51, 66, 227, 50, 212, 212, 163, 166,
                84, 103, 146, 109, 49, 26, 213, 8, 140, 40, 189, 160, 109, 29, 34, 238, 87, 25, 64,
                77, 109, 132,
            ]
            .to_vec(),
            DidSignature::Sr25519(Bytes64 {
                value: [
                    132, 220, 90, 210, 253, 178, 123, 247, 224, 241, 218, 160, 101, 56, 167, 139,
                    138, 73, 226, 151, 57, 229, 253, 163, 89, 6, 149, 243, 164, 54, 165, 67, 80,
                    217, 91, 182, 211, 108, 121, 134, 16, 12, 185, 228, 37, 208, 69, 130, 177, 136,
                    104, 195, 34, 47, 205, 191, 55, 23, 11, 38, 139, 129, 225, 142,
                ],
            }),
        )
    }
}
